package boundaries;

import java.sql.*;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author quent
 */
public class JIFCrudRubrique extends javax.swing.JInternalFrame {

    private Connection icn;

    /**
     * Creates new form JIFCrudRubrique
     */
    public JIFCrudRubrique() {
        initComponents();
        setVisible(true);

        PreparedStatement lpst;
        ResultSet lrs;
        String lsDSN;
        Object[] tEntetes;
        Object[][] tDataTable;
        Object[] tDataLigne;

        try {
            // Connexion à la DB
            lsDSN = "jdbc:mysql://127.0.0.1:3306/cinescope2017";
            icn = DriverManager.getConnection(lsDSN, "root", "");

            lpst = icn.prepareStatement("SELECT * FROM rubrique");
            lrs = lpst.executeQuery();

            /*
             * Récupération de la structure du curseur
             * Le tableau d'Objet des en-têtes est rempli à partir des noms des 
             * colonnes du curseur grâce au ResultSetMetaData.
             */
            ResultSetMetaData lrsmd = lrs.getMetaData();
            // Nombre de colonnes du curseur
            int liColonnes = lrsmd.getColumnCount();
            // Noms des colonnes de la table
            tEntetes = new Object[liColonnes];
            for (int i = 0; i < liColonnes; i++) {
                tEntetes[i] = lrsmd.getColumnName(i + 1);
            }

            /* 
             * Pour l'insertion des données de la table dans la jTableRubrique
             * Pour obtenir le nombre d'enregistrements et pouvoir dimensionner le tableau,
             * il faut se positionner sur le dernier enregistrement.
             */
            lrs.last();
            int liLignes = lrs.getRow();
            tDataTable = new Object[liLignes][liColonnes];

            lrs.beforeFirst();
            int i = 0;
            // Balayage des lignes
            while (lrs.next()) {
                // Balayage des colonnes pour construire une ligne
                tDataLigne = new Object[liColonnes];
                for (int j = 0; j < liColonnes; j++) {
                    if (lrs.getObject(j + 1) == null) {
                        tDataLigne[j] = "NUL";
                    } else {
                        tDataLigne[j] = lrs.getObject(j + 1).toString();
                    }
                }
                tDataTable[i] = tDataLigne;
                i++;
            }

            // La jTableRubrique est remplie avec les deux tableaux créés
            jTableRubrique.setModel(new DefaultTableModel(tDataTable, tEntetes));

            // Fermetures
            lrs.close();
            lpst.close();

        } catch (SQLException e) {
            jLabelMessage.setText(e.getMessage());
        }

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTableRubrique = new javax.swing.JTable();
        jLabelId = new javax.swing.JLabel();
        jLabelCode = new javax.swing.JLabel();
        jLabelNom = new javax.swing.JLabel();
        jButtonAjouter = new javax.swing.JButton();
        jButtonModifier = new javax.swing.JButton();
        jButtonSupprimer = new javax.swing.JButton();
        jLabelMessage = new javax.swing.JLabel();
        jTextFieldId = new javax.swing.JTextField();
        jTextFieldCode = new javax.swing.JTextField();
        jTextFieldNom = new javax.swing.JTextField();

        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        setTitle("CRUD Rubrique");
        addInternalFrameListener(new javax.swing.event.InternalFrameListener() {
            public void internalFrameActivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosed(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosing(javax.swing.event.InternalFrameEvent evt) {
                formInternalFrameClosing(evt);
            }
            public void internalFrameDeactivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeiconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameIconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameOpened(javax.swing.event.InternalFrameEvent evt) {
            }
        });

        jScrollPane1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jScrollPane1MouseClicked(evt);
            }
        });

        jTableRubrique.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jTableRubrique.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTableRubriqueMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTableRubrique);

        jLabelId.setText("ID");

        jLabelCode.setText("Code");

        jLabelNom.setText("Nom");

        jButtonAjouter.setText("Ajouter");
        jButtonAjouter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAjouterActionPerformed(evt);
            }
        });

        jButtonModifier.setText("Modifier");
        jButtonModifier.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonModifierActionPerformed(evt);
            }
        });

        jButtonSupprimer.setText("Supprimer");
        jButtonSupprimer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSupprimerActionPerformed(evt);
            }
        });

        jLabelMessage.setText("Message");

        jTextFieldId.setEditable(false);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(35, 35, 35)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jButtonAjouter)
                        .addGap(117, 117, 117)
                        .addComponent(jButtonModifier)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButtonSupprimer))
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabelId)
                            .addComponent(jLabelCode)
                            .addComponent(jLabelNom))
                        .addGap(65, 65, 65)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jTextFieldId, javax.swing.GroupLayout.DEFAULT_SIZE, 50, Short.MAX_VALUE)
                            .addComponent(jTextFieldCode)
                            .addComponent(jTextFieldNom)))
                    .addComponent(jLabelMessage, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(50, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(54, 54, 54)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelId)
                    .addComponent(jTextFieldId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(30, 30, 30)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelCode)
                    .addComponent(jTextFieldCode, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(26, 26, 26)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelNom)
                    .addComponent(jTextFieldNom, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(41, 41, 41)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonAjouter)
                    .addComponent(jButtonModifier)
                    .addComponent(jButtonSupprimer))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 44, Short.MAX_VALUE)
                .addComponent(jLabelMessage)
                .addGap(22, 22, 22))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonAjouterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAjouterActionPerformed
        /*
         * Déclaration des attributs 
         */
        String lstSQL = "INSERT INTO rubrique (CODE_rubrique, INTITULE_rubrique) VALUES(?,?)";
        String lsCode = jTextFieldCode.getText();
        String lsNom = jTextFieldNom.getText();

        // Condition de vérification au niveau du remplissage des champs
        if (lsCode.isEmpty() || lsNom.isEmpty()) {
            jLabelMessage.setText("Veuillez remplir tout les champs.");
        } else {
            /*
             * Bloc TRY pour la préparation de la requête SQL ainsi que la valorisation des
             * paramètres, suivi par l'exécution de celle-ci puis la fermeture du curseur.
             * Ensuite, bloc CATCH si une exception est levée durant l'opération.
             */
            try {
                PreparedStatement lpst = icn.prepareStatement(lstSQL);

                lpst.setString(1, lsCode);
                lpst.setString(2, lsNom);

                int liAffecte = lpst.executeUpdate();
                // Si l'ordre a bien été exécuté, affichage d'un message de réussite
                if (liAffecte == 1) {
                    jLabelMessage.setText("Le genre " + jTextFieldNom.getText() + " a bien été ajouté.");
                    // Sinon affiche comme quoi il y a eu un incident
                } else {
                    jLabelMessage.setText("Erreur dans l'insertion.");
                }
                lpst.close();

            } catch (SQLException ex) {
                jLabelMessage.setText(ex.getMessage());
            }
        }
    }//GEN-LAST:event_jButtonAjouterActionPerformed

    private void jScrollPane1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jScrollPane1MouseClicked

    }//GEN-LAST:event_jScrollPane1MouseClicked

    private void jButtonModifierActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonModifierActionPerformed
        /*
         * Déclaration des attributs 
         */
        PreparedStatement lpst;
        String lsUpdate = "UPDATE rubrique SET CODE_rubrique = ?, INTITULE_rubrique = ? WHERE ID_rubrique = ?";
        String lsCode = jTextFieldCode.getText();
        String lsNom = jTextFieldNom.getText();
        String lsId = jTextFieldId.getText();

        /*
         * Bloc TRY pour la préparation de la requête SQL ainsi que la valorisation des
         * paramètres, suivi par l'exécution de celle-ci puis la fermeture du curseur.
         * Ensuite, bloc CATCH si une exception est levée durant l'opération.
         */
        try {
            lpst = icn.prepareStatement(lsUpdate);

            lpst.setString(1, lsCode);
            lpst.setString(2, lsNom);
            lpst.setString(3, lsId);

            lpst.executeUpdate();

            lpst.close();
            jLabelMessage.setText("La rubrique " + jTextFieldNom.getText() + " a bien été modifié.");

        } catch (SQLException ex) {
            jLabelMessage.setText(ex.getMessage());
        }
    }//GEN-LAST:event_jButtonModifierActionPerformed

    private void jButtonSupprimerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSupprimerActionPerformed
        /*
         * Déclaration des attributs 
         */
        PreparedStatement lpst;
        String lsId = jTextFieldId.getText().toString();
        String lsDelete = "DELETE FROM rubrique WHERE ID_rubrique = ?";

        /*
         * Bloc TRY pour la préparation de la requête SQL ainsi que la valorisation des
         * paramètres, suivi par l'exécution de celle-ci puis la fermeture du curseur.
         * Ensuite, bloc CATCH si une exception est levée durant l'opération.
         */
        try {
            lpst = icn.prepareStatement(lsDelete);

            lpst.setString(1, lsId);
            lpst.executeUpdate();

            lpst.close();
            jLabelMessage.setText("La rubrique " + jTextFieldNom.getText() + " a bien été supprimé.");

        } catch (SQLException ex) {
            jLabelMessage.setText(ex.getMessage());
        }
    }//GEN-LAST:event_jButtonSupprimerActionPerformed

    private void formInternalFrameClosing(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_formInternalFrameClosing
        // DECONNEXION DE LA BD
        try {
            icn.close();
        } catch (SQLException ex) {
            System.err.println(ex.getMessage());
        }
    }//GEN-LAST:event_formInternalFrameClosing

    private void jTableRubriqueMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTableRubriqueMouseClicked
        int selectedRow = this.jTableRubrique.getSelectedRow();

        if (selectedRow >= 0) {
            jTextFieldId.setText(jTableRubrique.getValueAt(selectedRow, 0).toString());
            jTextFieldCode.setText(jTableRubrique.getValueAt(selectedRow, 1).toString());
            jTextFieldNom.setText(jTableRubrique.getValueAt(selectedRow, 2).toString());
        } else {
            jLabelMessage.setText("Erreur");
        }
    }//GEN-LAST:event_jTableRubriqueMouseClicked


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonAjouter;
    private javax.swing.JButton jButtonModifier;
    private javax.swing.JButton jButtonSupprimer;
    private javax.swing.JLabel jLabelCode;
    private javax.swing.JLabel jLabelId;
    private javax.swing.JLabel jLabelMessage;
    private javax.swing.JLabel jLabelNom;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTableRubrique;
    private javax.swing.JTextField jTextFieldCode;
    private javax.swing.JTextField jTextFieldId;
    private javax.swing.JTextField jTextFieldNom;
    // End of variables declaration//GEN-END:variables
}
