package boundaries;

import daos.ArrondissementDAO;
import daos.Globale;
import entities.Arrondissement;
import java.awt.Component;
import java.awt.Rectangle;
import java.sql.*;
import java.util.List;
import javax.swing.*;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author quent
 */
public class JIFCrudArrondissement extends javax.swing.JInternalFrame {

    private Connection cnx;
    private ArrondissementDAO dao;
    private DefaultTableModel ldtm;
    private Object[] tLigne;
    private String motifCode = "[0-9]{2}";
    private String motifNom = "^[\\D]{5,50}$";
    private Boolean lbOk;

    /**
     * Creates new form JIFCrudArrondissement
     */
    public JIFCrudArrondissement() {
        initComponents();
        setVisible(true);

        // Bloc try/catch pour la connexion et l'instanciation de la jTable
        try {
            cnx = Globale.getCnx();
            System.out.println(cnx);

            ldtm = (DefaultTableModel) jTableArrondissement.getModel();

        } catch (Exception ex) {
            jLabelMessage.setText(ex.getMessage());
        }

        remplirjTableArrondissement();

    } // Fin Constructeur

    private void remplirjTableArrondissement() {
        // Boucle permettant de mettre à jour la table Arrondissement
        for (int i = ldtm.getRowCount() - 1; i >= 0; i--) {
            ldtm.removeRow(i);
        }

        /*
         * Bloc TRY and CATCH pour l'affichage des données de la table Arrondissement
         * dans la jTableArrondissement
         */
        try {
            // Création et Instanciation d'un Objet DAO avec une connexion à la DB
            dao = new ArrondissementDAO(cnx);
            // Exécution de la procédure stockée définie dans le DAO
            List<Arrondissement> listeArrondissement = dao.selectAll();
            for (int i = 0; i < listeArrondissement.size(); i++) {
                Arrondissement a = listeArrondissement.get(i);
                tLigne = new Object[4];
                tLigne[0] = "";
                tLigne[1] = a.getIdArrondissement();
                tLigne[2] = a.getCodeArrondissement();
                tLigne[3] = a.getNomArrondissement();;
                ldtm.addRow(tLigne);
            }
        } catch (Exception ex) {
            jLabelMessage.setText(ex.getMessage());
        }
    }// Fin remplirJTableGenre

    private void cls() {

        try {
            // Déclaration d'un tableau de composants
            Component[] tComposants = getContentPane().getComponents();
            // Boucle pour récupérer le nombre de composants sur le panel
            for (int i = 0; i < tComposants.length; i++) {
                Object objet = tComposants[i];
                /*
                 * Si un des composants présent sur le panel est identique à la 
                 * classe java correspondant aux JTextField, alors il faut le remplacer
                 * par une chaîne vide
                 */
                if (objet.getClass().toString().equals("class javax.swing.JTextField")) {
                    JTextField composant = (JTextField) objet;
                    composant.setText("");
                }
            }
        } catch (Exception ex) {
            jLabelMessage.setText(ex.getMessage());
        }
    }// Fin cls

    private String majPremier(String caract) {
        StringBuilder result = new StringBuilder(caract);
        String lsResult = result.substring(0, 1).toUpperCase() + result.substring(1).toLowerCase();

        return lsResult;
    }// Fin majPremier

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTableArrondissement = new javax.swing.JTable();
        jButtonCLS = new javax.swing.JButton();
        jButtonAjouter = new javax.swing.JButton();
        jButtonModifier = new javax.swing.JButton();
        jButtonSupprimer = new javax.swing.JButton();
        jLabelID = new javax.swing.JLabel();
        jLabelCode = new javax.swing.JLabel();
        jLabelNom = new javax.swing.JLabel();
        jTextFieldID = new javax.swing.JTextField();
        jTextFieldCode = new javax.swing.JTextField();
        jTextFieldNom = new javax.swing.JTextField();
        jLabelMessage = new javax.swing.JLabel();
        jLabelMessageErreurCode = new javax.swing.JLabel();
        jLabelMessageErreurNom = new javax.swing.JLabel();
        jButtonValider = new javax.swing.JButton();

        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        setTitle("CRUD Arrondissement");
        addInternalFrameListener(new javax.swing.event.InternalFrameListener() {
            public void internalFrameActivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosed(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosing(javax.swing.event.InternalFrameEvent evt) {
                formInternalFrameClosing(evt);
            }
            public void internalFrameDeactivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeiconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameIconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameOpened(javax.swing.event.InternalFrameEvent evt) {
            }
        });

        jTableArrondissement.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Flag", "ID_arrondisement", "CODE_arrondissement", "NOM_arrondissement"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTableArrondissement.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTableArrondissementMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTableArrondissement);

        jButtonCLS.setText("CLS");
        jButtonCLS.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCLSActionPerformed(evt);
            }
        });

        jButtonAjouter.setText("Ajouter");
        jButtonAjouter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAjouterActionPerformed(evt);
            }
        });

        jButtonModifier.setText("Modifier");
        jButtonModifier.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonModifierActionPerformed(evt);
            }
        });

        jButtonSupprimer.setText("Supprimer");
        jButtonSupprimer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSupprimerActionPerformed(evt);
            }
        });

        jLabelID.setText("ID");

        jLabelCode.setText("Code");

        jLabelNom.setText("Nom");

        jTextFieldID.setEditable(false);
        jTextFieldID.setBackground(new java.awt.Color(255, 51, 51));
        jTextFieldID.setBorder(null);

        jLabelMessage.setText("Message");

        jLabelMessageErreurCode.setForeground(new java.awt.Color(255, 0, 0));

        jLabelMessageErreurNom.setForeground(new java.awt.Color(255, 0, 0));

        jButtonValider.setText("Valider");
        jButtonValider.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonValiderActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(22, 22, 22)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabelMessage)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addGroup(layout.createSequentialGroup()
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jButtonCLS)
                                        .addComponent(jLabelID)
                                        .addComponent(jLabelCode)
                                        .addComponent(jLabelNom))
                                    .addGap(18, 18, Short.MAX_VALUE)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addGroup(layout.createSequentialGroup()
                                            .addComponent(jButtonAjouter)
                                            .addGap(35, 35, 35)
                                            .addComponent(jButtonModifier)
                                            .addGap(37, 37, 37)
                                            .addComponent(jButtonSupprimer))
                                        .addGroup(layout.createSequentialGroup()
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                .addComponent(jTextFieldID)
                                                .addComponent(jTextFieldCode, javax.swing.GroupLayout.DEFAULT_SIZE, 69, Short.MAX_VALUE)
                                                .addComponent(jTextFieldNom))
                                            .addGap(38, 38, 38)
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                .addComponent(jLabelMessageErreurCode, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addComponent(jLabelMessageErreurNom, javax.swing.GroupLayout.DEFAULT_SIZE, 209, Short.MAX_VALUE)))))
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 385, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(166, 166, 166)
                        .addComponent(jButtonValider)))
                .addContainerGap(37, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(38, 38, 38)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelID)
                    .addComponent(jTextFieldID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(23, 23, 23)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelCode)
                    .addComponent(jTextFieldCode, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelMessageErreurCode))
                .addGap(26, 26, 26)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelNom)
                    .addComponent(jTextFieldNom, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelMessageErreurNom))
                .addGap(54, 54, 54)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonCLS)
                    .addComponent(jButtonAjouter)
                    .addComponent(jButtonModifier)
                    .addComponent(jButtonSupprimer))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 28, Short.MAX_VALUE)
                .addComponent(jButtonValider)
                .addGap(19, 19, 19)
                .addComponent(jLabelMessage)
                .addGap(45, 45, 45))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jTableArrondissementMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTableArrondissementMouseClicked
        int selectedRow = this.jTableArrondissement.getSelectedRow();

        if (selectedRow >= 0) {
            jTextFieldID.setText(jTableArrondissement.getValueAt(selectedRow, 1).toString());
            jTextFieldCode.setText(jTableArrondissement.getValueAt(selectedRow, 2).toString());
            jTextFieldNom.setText(jTableArrondissement.getValueAt(selectedRow, 3).toString());
            jLabelMessageErreurCode.setText("");
            jLabelMessageErreurNom.setText("");
        } else {
            jLabelMessage.setText("Erreur");
        }
    }//GEN-LAST:event_jTableArrondissementMouseClicked

    private void jButtonCLSActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCLSActionPerformed
        // Lors du clic sur le bouton CLS, remise à zéro de tout les champs
        jTextFieldID.setText("");
        jTextFieldCode.setText("");
        jTextFieldNom.setText("");
        jLabelMessageErreurCode.setText("");
        jLabelMessageErreurNom.setText("");
    }//GEN-LAST:event_jButtonCLSActionPerformed

    private void jButtonAjouterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAjouterActionPerformed
        int liAffecte = 0;
        lbOk = true;

        /*
         * Si le premier champs rempli ne correspond pas au motif de l'expression
         * régulière, on affiche le premier message d'erreur.
         */
        if (!jTextFieldCode.getText().matches(motifCode)) {
            jLabelMessageErreurCode.setText("Le code doit être composé de 2 chiffres.");
            lbOk = false;
        }
        /*
         * Si le deuxième champs rempli ne correspond pas au motif de l'expression
         * régulière, on affiche le second message d'erreur.
         */
        if (!jTextFieldNom.getText().matches(motifNom)) {
            jLabelMessageErreurNom.setText("5 caractères min et 50 caractères max.");
            lbOk = false;
        }
        // Si les champs sont correctement remplis, début du Bloc TRY and CATCH
        if (lbOk) {
            String[] ligne = new String[4];
            ligne[0] = "+";
            ligne[1] = "";
            ligne[2] = jTextFieldCode.getText();
            ligne[3] = jTextFieldNom.getText();
            ldtm.addRow(ligne);
            int liMax = jTableArrondissement.getRowCount() - 1;
            jTableArrondissement.getSelectionModel().setSelectionInterval(liMax, liMax);
            jTableArrondissement.scrollRectToVisible(new Rectangle(jTableArrondissement.getCellRect(liMax, 0, true)));
        }
    }//GEN-LAST:event_jButtonAjouterActionPerformed

    private void jButtonModifierActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonModifierActionPerformed
        int liLigneSelectionnee = jTableArrondissement.getSelectedRow();
        String lsFlag;
        lbOk = true;

        /*
         * Si le premier champs rempli ne correspond pas au motif de l'expression
         * régulière, on affiche le premier message d'erreur.
         */
        if (!jTextFieldCode.getText().matches(motifCode)) {
            jLabelMessageErreurCode.setText("Le code doit être composé de 2 chiffres.");
            lbOk = false;
        }
        /*
         * Si le deuxième champs rempli ne correspond pas au motif de l'expression
         * régulière, on affiche le second message d'erreur.
         */
        if (!jTextFieldNom.getText().matches(motifNom)) {
            jLabelMessageErreurNom.setText("5 caractères min et 50 caractères max.");
            lbOk = false;
        }
        // Si les champs sont correctement remplis, début du Bloc TRY and CATCH
        if (lbOk) {

            lsFlag = jTableArrondissement.getValueAt(liLigneSelectionnee, 0).toString();
            if (lsFlag.equals("+")) {
                jTableArrondissement.setValueAt(jTextFieldCode.getText(), liLigneSelectionnee, 2);
                jTableArrondissement.setValueAt(jTextFieldNom.getText(), liLigneSelectionnee, 3);
            } else {
                jTableArrondissement.setValueAt("v", liLigneSelectionnee, 0);
                jTableArrondissement.setValueAt(jTextFieldCode.getText(), liLigneSelectionnee, 2);
                jTableArrondissement.setValueAt(jTextFieldNom.getText(), liLigneSelectionnee, 3);
            }
        }

    }//GEN-LAST:event_jButtonModifierActionPerformed

    private void jButtonSupprimerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSupprimerActionPerformed
        int liLigneSelectionnee = jTableArrondissement.getSelectedRow();
        String lsFlag;

        if (liLigneSelectionnee != -1) {
            lsFlag = jTableArrondissement.getValueAt(liLigneSelectionnee, 0).toString();
            if (lsFlag.equals("+")) {
                ldtm.removeRow(liLigneSelectionnee);
            } else {
                jTableArrondissement.setValueAt("-", liLigneSelectionnee, 0);
            }
        } else {
            jLabelMessage.setText("Sélectionnez une ligne !!!");
        }
    }//GEN-LAST:event_jButtonSupprimerActionPerformed

    private void formInternalFrameClosing(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_formInternalFrameClosing
        // DECONNEXION DE LA BD
//        try {
//            icnx.close();
//        } catch (SQLException ex) {
//            System.err.println(ex.getMessage());
//        }
    }//GEN-LAST:event_formInternalFrameClosing

    private void jButtonValiderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonValiderActionPerformed
        // 
        String lsFlag;

        try {
            for (int i = jTableArrondissement.getRowCount() - 1; i >= 0; i--) {
                lsFlag = jTableArrondissement.getValueAt(i, 0).toString();
                if (lsFlag.equals("+")) {
                    // Valorisation des paramètres de la requête SQL Insert
                    Arrondissement Arr1 = new Arrondissement(jTextFieldCode.getText(), jTextFieldNom.getText());
                    // Exécution de l'ordre SQL
                    dao.insert(Arr1);
                    jTableArrondissement.setValueAt("", i, 0);

                }
                if (lsFlag.equals("v")) {
                    // Valorisation des paramètres de la requête SQL Update
                    Arrondissement Arr2 = new Arrondissement(Integer.valueOf(jLabelID.getText()), jTextFieldCode.getText(), jTextFieldNom.getText());
                    // Exécution de l'ordre SQL
                    dao.update(Arr2);
                    jTableArrondissement.setValueAt("", i, 0);
                }
                if (lsFlag.equals("-")) {
                    // Valorisation des paramètres de la requête SQL Update
                    Arrondissement Arr2 = new Arrondissement(Integer.valueOf(jLabelID.getText()), jTextFieldCode.getText(), jTextFieldNom.getText());
                    // Exécution de l'ordre SQL 
                    dao.delete(Arr2);
                    ldtm.removeRow(i);
                }

            }
            cnx.commit();
            jLabelMessage.setText("Validations exécutées");
            remplirjTableArrondissement();
        } catch (SQLException ex) {
            try {
                cnx.rollback();
            } catch (SQLException e) {
                System.out.println("KO");
            }
        }
    }//GEN-LAST:event_jButtonValiderActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonAjouter;
    private javax.swing.JButton jButtonCLS;
    private javax.swing.JButton jButtonModifier;
    private javax.swing.JButton jButtonSupprimer;
    private javax.swing.JButton jButtonValider;
    private javax.swing.JLabel jLabelCode;
    private javax.swing.JLabel jLabelID;
    private javax.swing.JLabel jLabelMessage;
    private javax.swing.JLabel jLabelMessageErreurCode;
    private javax.swing.JLabel jLabelMessageErreurNom;
    private javax.swing.JLabel jLabelNom;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTableArrondissement;
    private javax.swing.JTextField jTextFieldCode;
    private javax.swing.JTextField jTextFieldID;
    private javax.swing.JTextField jTextFieldNom;
    // End of variables declaration//GEN-END:variables
}
